import abc
import typing as _t

from ..id import new_id
from a2a.types import (
    Message, 
    Task,
    TaskStatusUpdateEvent,
    TaskArtifactUpdateEvent,
)

from ..tool.base import Tool
from .types import AgentRunInput, AgentRunOutput, ToolCall, ToolCallResult

__all__ = [
    "Agent",
    "AgentRunInput",
    "AgentRunOutput",
    "ToolCall",
    "ToolCallResult",
]


class Agent(abc.ABC):
    """Framework-agnostic agent wrapper with A2A compatibility.
    
    Typical interaction flow:
    
        Client ➜ message/stream
        Message.parts = [{type:"text",text:"Summarize this JSON"}, {type:"data",data:{…}}]

        Server SSE #1 ➜ Message
        role:"assistant", parts:[{type:"text",text:"Working…"}]

        Server SSE #2 ➜ TaskStatusUpdateEvent
        status.state:"working", final:false

        Server SSE #3 ➜ TaskArtifactUpdateEvent (append=false)
        artifact.parts:[{type:"data",data:{draft:…}}]

        Server SSE #4 ➜ TaskArtifactUpdateEvent (append=true lastChunk=true)

        Server SSE #5 ➜ TaskStatusUpdateEvent
        status.state:"completed", final:true  ← server closes stream
    """

    id: str
    name: str
    description: str
    tools: list[Tool]
    version: str

    def __init__(
        self, 
        *, 
        id: str | None = None, 
        name: str, 
        description: str, 
        version: str = "1.0.0",
        tools: list[Tool] | None = None,
    ) -> None:
        """Initialize an agent with A2A compatibility.
        
        Args:
            id: Unique identifier for the agent (autogenerated if not provided)
            name: Name of the agent
            description: Description of the agent
            version: Version string
            tools: List of tools the agent can use
        """
        self.name = name
        self.description = description
        self.version = version
        self.id = id or new_id(prefix=self.name)
        self.tools = tools or []

    @abc.abstractmethod
    async def run(self, input: AgentRunInput) -> AgentRunOutput:
        """Execute agent logic and return structured output."""
        ...
